/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cvatonpostgres;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagLayout;

import java.awt.event.MouseEvent;
import java.sql.Array;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.List;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTable;
import javax.swing.table.TableCellRenderer;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.BorderFactory;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.TableModel;

/**
 *
 * @author Keith Harryman
 */
public class CvatJFrame extends javax.swing.JFrame {

    static private JPanel myListedPanel;
    static public JFrame cvatJFrame;
    static public CvatJFrame myFrame;
    SimpleTableModel bolsTableModel = null, bolVehiclesTableModel = null, driversTableModel, trailersTableModel, vehiclesLoadedTableModel;
    TableRowSorter sorter = null;
    TableCellRenderer defaultRenderer;
    List<String> bolsLoaded;
    List<List<String>> vehiclesLoaded;
    List<String> vehiclesLoadedTrailer;

    List<String[]> vehiclesLoadedVINs;

    List<List<String>> bolsTableList, vehiclesTableList, driversTableList, trailersTableList, vehiclesLoadedTableList;
    List<String> bolsColumns, vehiclesColumns, vehiclesLoadedColumns, trailersColumns, driversColumns;
    List<Integer> trailerIDs;
    
    public List<JOB> myJOBs;
    public List<BOL> myBOLs;
    public J

    static public String selectedTable = "";
    static public int selectedBOLIndex;
    private int selectedBOLRow = -1;
    private int selectedDriverIndex = -1, selectedTrailerIndex = -1;
    private int numberLoadedTrailer = 0;
    private String hasTrailer;
    private String selectedDriver = "", selectedTrailer = "";

    public Helpers h;
    public CellRenderer cellRenderer;
    private String savedFrom, savedTo;

    /**
     * Creates new form CvatJFrame
     */
    public CvatJFrame() {
        cvatJFrame = this;
        myFrame = this;
        h = new Helpers(this);
        initComponents();
        cellRenderer = new CellRenderer();
        hasTrailer = "N";
        //cvatJFrame.setExtendedState(cvatJFrame.getExtendedState() | JFrame.MAXIMIZED_BOTH);        
        cvatJFrame.setSize(new Dimension(1700, 600));
        bolsLoaded = new ArrayList<String>();
        vehiclesLoaded = new ArrayList<List<String>>();
        vehiclesLoadedTrailer = new ArrayList<String>();
        vehiclesLoadedVINs = new ArrayList<String[]>();

        bolsTableList = new ArrayList<List<String>>();
        vehiclesTableList = new ArrayList<List<String>>();
        driversTableList = new ArrayList<List<String>>();
        trailersTableList = new ArrayList<List<String>>();
        vehiclesLoadedTableList = new ArrayList<List<String>>();

        trailerIDs = new ArrayList<Integer>();
        selectedBOLIndex = 0;
        bolVehiclesTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        setColumns();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jLabel1 = new javax.swing.JLabel();
        jTabbedPane2 = new javax.swing.JTabbedPane();
        jTabbedPane5 = new javax.swing.JTabbedPane();
        BOLPanel = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        isActiveBOLs = new javax.swing.JCheckBox();
        jLabel11 = new javax.swing.JLabel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jTable6 = new javax.swing.JTable();
        getPastBOLVehicles = new javax.swing.JButton();
        ExportImportPanel = new javax.swing.JPanel();
        ListedPanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        getListedBOLs = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        bolsTable = new javax.swing.JTable();
        selectFromRegion = new javax.swing.JComboBox<>();
        selectToRegion = new javax.swing.JComboBox<>();
        jScrollPane5 = new javax.swing.JScrollPane();
        loadedVehiclesTable = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        ;
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        loadOut = new javax.swing.JButton();
        selectTrailerLabel = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        trailersTable = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        ;
        jScrollPane3 = new javax.swing.JScrollPane();
        driversTable = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        ;
        jScrollPane7 = new javax.swing.JScrollPane();
        bolVehiclesTable = new javax.swing.JTable(){
            @Override
            public Component prepareRenderer(TableCellRenderer renderer, int row, int column) {
                Component component = super.prepareRenderer(renderer, row, column);
                int rendererWidth = component.getPreferredSize().width;
                TableColumn tableColumn = getColumnModel().getColumn(column);
                tableColumn.setPreferredWidth(Math.max(rendererWidth + getIntercellSpacing().width, tableColumn.getPreferredWidth()));
                return component;
            }
        };
        ;
        jLabel5 = new javax.swing.JLabel();
        numberLoadedLabel = new javax.swing.JLabel();
        selectedBOLLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        selectedBolLabel = new javax.swing.JLabel();
        selectedDriverLabel = new javax.swing.JLabel();
        selectedTrailerLabel = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        loadedTrailerLabel = new javax.swing.JLabel();

        jLabel1.setText("jLabel1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel6.setText("ASSIGNED BOlS");

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Driver", "BOL ID", "Status", "Number Vehicles", "Pickup Name", "Pickup Address", "Dropoff Name", "Dropoff Address"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane4.setViewportView(jTable4);

        isActiveBOLs.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        isActiveBOLs.setText("Active(Not delivered) BOLs");
        isActiveBOLs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                isActiveBOLsActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel11.setText("Vehicles");

        jTable6.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "VIN", "Year", "Make", "Model"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane6.setViewportView(jTable6);
        if (jTable6.getColumnModel().getColumnCount() > 0) {
            jTable6.getColumnModel().getColumn(0).setResizable(false);
            jTable6.getColumnModel().getColumn(1).setResizable(false);
            jTable6.getColumnModel().getColumn(2).setResizable(false);
            jTable6.getColumnModel().getColumn(3).setResizable(false);
        }

        getPastBOLVehicles.setFont(new java.awt.Font("DialogInput", 0, 11)); // NOI18N
        getPastBOLVehicles.setText("Get BOL's Vehicles");
        getPastBOLVehicles.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getPastBOLVehiclesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout BOLPanelLayout = new javax.swing.GroupLayout(BOLPanel);
        BOLPanel.setLayout(BOLPanelLayout);
        BOLPanelLayout.setHorizontalGroup(
            BOLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BOLPanelLayout.createSequentialGroup()
                .addGap(54, 54, 54)
                .addGroup(BOLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 893, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BOLPanelLayout.createSequentialGroup()
                        .addComponent(jLabel11)
                        .addGap(28, 28, 28)
                        .addComponent(getPastBOLVehicles))
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 923, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(BOLPanelLayout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(66, 66, 66)
                        .addComponent(isActiveBOLs, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(1806, Short.MAX_VALUE))
        );
        BOLPanelLayout.setVerticalGroup(
            BOLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(BOLPanelLayout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(BOLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(isActiveBOLs))
                .addGap(24, 24, 24)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(BOLPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(getPastBOLVehicles))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(270, Short.MAX_VALUE))
        );

        jTabbedPane5.addTab("Place Order", BOLPanel);

        javax.swing.GroupLayout ExportImportPanelLayout = new javax.swing.GroupLayout(ExportImportPanel);
        ExportImportPanel.setLayout(ExportImportPanelLayout);
        ExportImportPanelLayout.setHorizontalGroup(
            ExportImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 2783, Short.MAX_VALUE)
        );
        ExportImportPanelLayout.setVerticalGroup(
            ExportImportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 843, Short.MAX_VALUE)
        );

        jTabbedPane5.addTab("Export/Import", ExportImportPanel);

        ListedPanel.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        ListedPanel.setMaximumSize(getSize());

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("LISTED VEHICLES");

        getListedBOLs.setFont(new java.awt.Font("Times New Roman", 1, 18)); // NOI18N
        getListedBOLs.setText("Get and Group Orders By Location");
        getListedBOLs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getListedBOLsActionPerformed(evt);
            }
        });

        bolsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "LOAD/UNLOAD", "From Name", "From Address", "To Name", "To Address", "# Vehicles"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        bolsTable.setColumnSelectionAllowed(true);
        bolsTable.setIntercellSpacing(new java.awt.Dimension(0, 0));
        bolsTable.getTableHeader().setReorderingAllowed(false);
        bolsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bolsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(bolsTable);
        bolsTable.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);

        selectFromRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arizona", "Bay Area California", "Texas" }));

        selectToRegion.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Arizona", "Bay Area California", "Texas" }));

        loadedVehiclesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "#", "VIN", "Year", "Make", "Model", "Length", "Height"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        loadedVehiclesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        loadedVehiclesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadedVehiclesTableMouseClicked(evt);
            }
        });
        jScrollPane5.setViewportView(loadedVehiclesTable);

        jLabel7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel7.setText("Loaded Vehicles");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("Region To:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setText("Region From:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("Order Results:");

        jLabel12.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel12.setText("Select Driver:");

        loadOut.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        loadOut.setText("LOAD OUT");
        loadOut.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                loadOutMouseClicked(evt);
            }
        });

        selectTrailerLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        selectTrailerLabel.setText("Select Trailer:");

        trailersTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Region", "Address", "Top Space", "Bottom Space", "Bottom Height"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        trailersTable.setToolTipText("");
        trailersTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        trailersTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                trailersTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(trailersTable);

        driversTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Driver", "Region", "Last Address", "Top Space", "Bottom Space", "Bottom Height"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        driversTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        driversTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                driversTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(driversTable);

        bolVehiclesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "LOAD/UNLOAD", "VIN", "Year", "Make", "Model", "Length", "Height"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        bolVehiclesTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        bolVehiclesTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bolVehiclesTableMouseClicked(evt);
            }
        });
        jScrollPane7.setViewportView(bolVehiclesTable);

        jLabel5.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel5.setText("Number Loaded:");

        numberLoadedLabel.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        numberLoadedLabel.setText("0");

        jLabel3.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel3.setText("Selected BOL#: ");

        jLabel13.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel13.setText("Vehicles");

        selectedBolLabel.setText("0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectedBolLabel)
                .addGap(18, 18, 18)
                .addComponent(jLabel13)
                .addContainerGap(41, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(jLabel13)
                    .addComponent(selectedBolLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        selectedDriverLabel.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        selectedDriverLabel.setText("0");

        selectedTrailerLabel.setText("0");

        jLabel14.setFont(new java.awt.Font("Times New Roman", 1, 12)); // NOI18N
        jLabel14.setText("Number Loaded Traiiler:");

        loadedTrailerLabel.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        loadedTrailerLabel.setText("0");

        javax.swing.GroupLayout ListedPanelLayout = new javax.swing.GroupLayout(ListedPanel);
        ListedPanel.setLayout(ListedPanelLayout);
        ListedPanelLayout.setHorizontalGroup(
            ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ListedPanelLayout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 1739, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(ListedPanelLayout.createSequentialGroup()
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 781, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(27, 27, 27))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ListedPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel10)
                                        .addGap(134, 134, 134)
                                        .addComponent(jLabel9)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectFromRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(31, 31, 31)
                                        .addComponent(jLabel8)
                                        .addGap(18, 18, 18)
                                        .addComponent(selectToRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(106, 106, 106)))
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(338, 338, 338)
                                        .addComponent(loadOut))
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addComponent(jScrollPane7)
                                        .addGap(55, 55, 55)))
                                .addGap(235, 235, 235))
                            .addGroup(ListedPanelLayout.createSequentialGroup()
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane5)
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(ListedPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel5)
                                                .addGap(18, 18, 18)
                                                .addComponent(numberLoadedLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                                        .addGap(28, 28, 28)
                                        .addComponent(jLabel14)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(loadedTrailerLabel)
                                        .addGap(0, 0, Short.MAX_VALUE)))
                                .addGap(18, 18, 18)
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addComponent(jLabel12)
                                        .addGap(9, 9, 9)
                                        .addComponent(selectedDriverLabel))
                                    .addComponent(jScrollPane3))
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addComponent(selectTrailerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(selectedTrailerLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(ListedPanelLayout.createSequentialGroup()
                                        .addGap(22, 22, 22)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGap(319, 319, 319))))
                    .addGroup(ListedPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 205, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(getListedBOLs)))
                .addGap(107, 107, 107)
                .addComponent(selectedBOLLabel)
                .addGap(881, 881, 881))
        );
        ListedPanelLayout.setVerticalGroup(
            ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ListedPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(getListedBOLs))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(ListedPanelLayout.createSequentialGroup()
                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ListedPanelLayout.createSequentialGroup()
                        .addContainerGap(32, Short.MAX_VALUE)
                        .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ListedPanelLayout.createSequentialGroup()
                                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(jLabel10)
                                        .addComponent(jLabel9)
                                        .addComponent(selectFromRegion, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(selectToRegion, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jLabel8)
                                        .addComponent(selectedBOLLabel)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ListedPanelLayout.createSequentialGroup()
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(22, 22, 22)))
                        .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(ListedPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(loadOut)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(numberLoadedLabel)
                    .addComponent(jLabel12)
                    .addComponent(selectTrailerLabel)
                    .addComponent(selectedDriverLabel)
                    .addComponent(selectedTrailerLabel)
                    .addComponent(jLabel14)
                    .addComponent(loadedTrailerLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ListedPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(278, 278, 278))
        );

        jTabbedPane5.addTab("Listed", ListedPanel);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane5)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane5)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void getPastBOLVehiclesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getPastBOLVehiclesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_getPastBOLVehiclesActionPerformed

    private void isActiveBOLsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_isActiveBOLsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_isActiveBOLsActionPerformed

    private void getListedBOLsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getListedBOLsActionPerformed
        //THIS GETS LISTED BOLS IN LIST TAB BY FROM AND TO REGION
        //INITIATE EVERYTHING!!!
        bolsLoaded.clear();
        vehiclesLoaded.clear();
        bolsTableList.clear();
        vehiclesTableList.clear();
        driversTableList.clear();
        trailersTableList.clear();
        trailerIDs.clear();
        vehiclesLoadedTableList.clear();
        vehiclesLoadedTrailer.clear();

        String selectedFrom = selectFromRegion.getSelectedItem().toString();
        String selectedTo = selectToRegion.getSelectedItem().toString();
        savedFrom = selectedFrom;
        savedTo = selectedTo;
        System.out.println("selectedFrom=" + selectedFrom + ", selectedTo=" + selectedTo);
        String bolSQL = "select "
                + "L1.Name as \"From Name\", L1.Address as \"From Address\", "
                + "L2.Name as \"To Name\",L2.Address as \"To Address\", COUNT(V.VIN) as \"# VEHICLES\" from "
                + "(((\"order\" O inner join location L1 on O.P_ID=L1.LocID) inner join location L2 on O.D_ID=L2.LocID) "
                + "inner join vehicle V on O.OrdID=V.OrdID) where "
                + "L1.Region='" + selectedFrom + "' and L2.Region='" + selectedTo + "' group by "
                + "L1.LocID, L2.LocID";
        //String bolSQL = "select Name,Address from location";        
        bolsTableList.clear();
        bolsLoaded.clear();
        ResultSet rs = DBConnection.getResultSet(bolSQL);
        int bolCt = 0;
        try {
            rs.last();
            bolCt = rs.getRow();
            System.out.println("bolCt=" + bolCt);
            for (int i = 0; i < rs.getRow(); i++) {
                bolsLoaded.add("LOAD");
            }
            rs.first();
        } catch (SQLException ex) {
            Logger.getLogger(CvatJFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        bolsTableList = loadBols(rs);

        bolsTableModel = new SimpleTableModel(bolsTableList, bolsColumns);
        bolsTable.setModel(bolsTableModel);
        bolsTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);

        //sorter = new TableRowSorter(bolTableModel);
        int number_vehicles;
        for (int r = 0; r < bolCt; r++) {
            number_vehicles = Integer.parseInt(bolsTableList.get(r).get(5));
            System.out.println("number vehicles=" + number_vehicles);
            vehiclesLoaded.add(new ArrayList<String>());
            for (int v = 0; v < number_vehicles; v++) {
                vehiclesLoaded.get(r).add("LOAD");
            }
        }
        loadDrivers();
        loadTrailers();

    }//GEN-LAST:event_getListedBOLsActionPerformed


    private void bolsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bolsTableMouseClicked
        bolsTable.setColumnSelectionInterval(1, bolsTable.getColumnCount() - 1);

        int row = bolsTable.rowAtPoint(evt.getPoint());
        int col = bolsTable.columnAtPoint(evt.getPoint());
        selectedBOLIndex = row;
        selectedBolLabel.setText(String.valueOf(row + 1));
        String FName = bolsTableList.get(row).get(1);
        String TName = bolsTableList.get(row).get(3);
        System.out.println("FName=" + FName + ", TName=" + TName);

        String bolVehiclesSQL = "SELECT V.Vin, V.\"Year\", V.Make, V.Model, V.\"Length\", V.Height FROM "
                + "(((vehicle V natural join \"order\" O) inner join "
                + "location L1 on O.P_ID=L1.LocID) inner join location L2 on O.D_ID=L2.LocID) "
                + "where L1.Name='" + FName + "' and L2.Name='" + TName + "'";

        vehiclesTableList.clear();
        vehiclesTableList = loadVehicles(bolVehiclesSQL, row);

        //------------------------------------------------------
        if (col == 0) {//IF LOAD/UNLOAD BUTTON CLICKED....
            System.out.println("CLICKED LOAD/UNLOAD BOL!!! bolsLoaded=" + bolsLoaded.get(row));
            if (bolsLoaded.get(row).equals("LOAD")) {
                bolsLoaded.set(row, "UNLOAD");
                bolsTableList.get(row).set(0, (row + 1) + " UNLOAD");
                for (int i = 0; i < vehiclesLoaded.get(row).size(); i++) {
                    vehiclesLoaded.get(row).set(i, "UNLOAD");
                    vehiclesTableList.get(i).set(0, (i + 1) + " UNLOAD");

                    boolean exists = false;
                    for (int vl = 0; vl < vehiclesLoadedTableList.size(); vl++) {
                        //IF VINs are equal..then remove
                        if (vehiclesLoadedTableList.get(vl).get(1).equals(vehiclesTableList.get(i).get(1))) {
                            exists = true;
                        }
                    }
                    if (!exists) {
                        vehiclesLoadedTableList.add(new ArrayList<String>());
                        //SET THIS TO LOAD FOR LOAD ONTO TRAILER WHEN ADDED TO 'LoadedList'
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(String.valueOf(selectedBOLIndex + 1) + " LOAD");
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(1));
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(2));
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(3));
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(4));
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(5));
                        vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(i).get(6));
                    }
                    vehiclesLoadedTrailer.add("LOAD");

                }
            } else if (bolsLoaded.get(row).equals("UNLOAD")) {
                bolsLoaded.set(row, "LOAD");
                bolsTableList.get(row).set(0, (row + 1) + " LOAD");
                for (int i = 0; i < vehiclesLoaded.get(row).size(); i++) {
                    vehiclesLoaded.get(row).set(i, "LOAD");
                    vehiclesTableList.get(i).set(0, (i + 1) + " LOAD");
                    for (int vl = 0; vl < vehiclesLoadedTableList.size(); vl++) {
                        //IF VINs are equal..then remove
                        if (vehiclesLoadedTableList.get(vl).get(1).equals(vehiclesTableList.get(i).get(1))) {
                            vehiclesLoadedTableList.remove(vl);
                            vehiclesLoadedTrailer.remove(vl);
                        }
                    }
                }
            }
            vehiclesLoadedTableModel = new SimpleTableModel(vehiclesLoadedTableList, vehiclesLoadedColumns);
            loadedVehiclesTable.setModel(vehiclesLoadedTableModel);
            if (vehiclesLoadedTableList.size() > 0) {
                loadedVehiclesTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(loadedVehiclesTable.getModel());
                loadedVehiclesTable.setRowSorter(sorter);
                List<RowSorter.SortKey> sortKeys = new ArrayList<>(10);
                sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                sorter.setSortKeys(sortKeys);
            }
            numberLoadedLabel.setText(String.valueOf(vehiclesLoadedTableList.size()));
            bolsTable.clearSelection();
        }

        bolVehiclesTableModel = new SimpleTableModel(vehiclesTableList, vehiclesColumns);

        System.out.println("BEFORE SET VECHICLE RENDERER");
        bolVehiclesTable.setModel(bolVehiclesTableModel);
        bolVehiclesTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);


    }//GEN-LAST:event_bolsTableMouseClicked

    private void bolVehiclesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_bolVehiclesTableMouseClicked
        // TODO add your handling code here:        
        int row = bolVehiclesTable.rowAtPoint(evt.getPoint());
        int col = bolVehiclesTable.columnAtPoint(evt.getPoint());
        if (col == 0) {//IF LOAD/UNLOAD BUTTON CLICKED....
            System.out.println("row=" + row);
            if (vehiclesLoaded.get(selectedBOLIndex).get(row).equals("LOAD")) {//ADD REMOVE
                vehiclesLoaded.get(selectedBOLIndex).set(row, "UNLOAD");
                vehiclesTableList.get(row).set(0, (row + 1) + " UNLOAD");
                //Vin, Year,Make, Model       

                vehiclesLoadedTableList.add(new ArrayList<String>());
                System.out.println("vehiclesTableList=" + vehiclesTableList.size());
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(String.valueOf(selectedBOLIndex + 1) + " LOAD");
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(1));
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(2));
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(3));
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(4));
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(5));
                vehiclesLoadedTableList.get(vehiclesLoadedTableList.size() - 1).add(vehiclesTableList.get(row).get(6));

                vehiclesLoadedTrailer.add("LOAD");
            } else if (vehiclesLoaded.get(selectedBOLIndex).get(row).equals("UNLOAD")) {
                vehiclesLoaded.get(selectedBOLIndex).set(row, "LOAD");
                vehiclesTableList.get(row).set(0, (row + 1) + " LOAD");
                for (int vl = 0; vl < vehiclesLoadedTableList.size(); vl++) {
                    //IF VINs are equal:
                    if (vehiclesLoadedTableList.get(vl).get(1).equals(vehiclesTableList.get(row).get(1))) {
                        vehiclesLoadedTableList.remove(vl);
                        vehiclesLoadedTrailer.remove(vl);
                    }
                }
            }
            vehiclesLoadedTableModel = new SimpleTableModel(vehiclesLoadedTableList, vehiclesLoadedColumns);
            loadedVehiclesTable.setModel(vehiclesLoadedTableModel);
            if (vehiclesLoadedTableList.size() > 0) {
                loadedVehiclesTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(loadedVehiclesTable.getModel());
                loadedVehiclesTable.setRowSorter(sorter);
                List<RowSorter.SortKey> sortKeys = new ArrayList<>(10);
                sortKeys.add(new RowSorter.SortKey(0, SortOrder.ASCENDING));
                sorter.setSortKeys(sortKeys);
            }

            numberLoadedLabel.setText(String.valueOf(vehiclesLoadedTableList.size()));
            bolVehiclesTableModel = new SimpleTableModel(vehiclesTableList, vehiclesColumns);
            bolVehiclesTable.setModel(bolVehiclesTableModel);
            bolVehiclesTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);

            boolean is_all_loaded = true;
            boolean is_all_unloaded = true;
            for (int i = 0; i < vehiclesLoaded.get(selectedBOLIndex).size(); i++) {
                if (vehiclesLoaded.get(selectedBOLIndex).get(i).equals("LOAD")) {
                    is_all_unloaded = false;
                } else {
                    is_all_loaded = false;
                }
            }
            if (is_all_loaded) {
                System.out.println(selectedBOLIndex + " IS ALL LOADED");
                bolsLoaded.set(selectedBOLIndex, "LOAD");
                bolsTableList.get(selectedBOLIndex).set(0, (selectedBOLIndex + 1) + " LOAD");
            } else if (is_all_unloaded) {
                System.out.println(selectedBOLIndex + " IS ALL UNLOADED");
                bolsLoaded.set(selectedBOLIndex, "UNLOAD");
                bolsTableList.get(selectedBOLIndex).set(0, (selectedBOLIndex + 1) + " UNLOAD");
            }

            bolsTableModel = new SimpleTableModel(bolsTableList, bolsColumns);
            bolsTable.setModel(bolsTableModel);
            bolsTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
        }
    }//GEN-LAST:event_bolVehiclesTableMouseClicked

    private void driversTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_driversTableMouseClicked
        if (driversTable.rowAtPoint(evt.getPoint()) != selectedDriverIndex && selectedDriverIndex!=-1) {
            loadDrivers();
            resetLoadedVins();
        }
        selectedDriverIndex = driversTable.rowAtPoint(evt.getPoint());
        driversTable.setRowSelectionInterval(selectedDriverIndex, selectedDriverIndex);
        selectedDriverLabel.setText(driversTableList.get(selectedDriverIndex).get(1));
        hasTrailer = driversTableList.get(selectedDriverIndex).get(7);

    }//GEN-LAST:event_driversTableMouseClicked

    private void trailersTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_trailersTableMouseClicked
        selectedTrailerIndex = driversTable.rowAtPoint(evt.getPoint());
        selectedTrailerLabel.setText(String.valueOf(selectedTrailerIndex + 1));
    }//GEN-LAST:event_trailersTableMouseClicked

    private void loadedVehiclesTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadedVehiclesTableMouseClicked
        int row = loadedVehiclesTable.rowAtPoint(evt.getPoint());
        int col = loadedVehiclesTable.columnAtPoint(evt.getPoint());
        if (col == 0) {
            //CHECK THAT TRAILER AND DRIVER ARE SELECTED...            
            if (selectedDriverIndex == -1 || (hasTrailer.equals("N") && trailersTableList.size() > 0 && selectedTrailerIndex == -1)) {
                h.infoMessage("DRIVER AND/OR TRAILER NOT SELECTED");
                return;
            }
            int tSpace = 0, bSpace = 0, bHeight = 0;
            if (hasTrailer.equals("Y")) {
                tSpace = Integer.parseInt(driversTableList.get(selectedDriverIndex).get(4));
                bSpace = Integer.parseInt(driversTableList.get(selectedDriverIndex).get(5));
                bHeight = Integer.parseInt(driversTableList.get(selectedDriverIndex).get(6));
            } else if (hasTrailer.equals("N")) {
                tSpace = Integer.parseInt(trailersTableList.get(selectedTrailerIndex).get(3));
                bSpace = Integer.parseInt(trailersTableList.get(selectedTrailerIndex).get(4));
                bHeight = Integer.parseInt(trailersTableList.get(selectedTrailerIndex).get(5));
            }
            int vLength = Integer.parseInt(vehiclesLoadedTableList.get(row).get(5));
            if (vehiclesLoadedTrailer.get(row).equals("LOAD")) {
                String whichLevel = h.infoBox();
                System.out.println("YOU SELECTED " + whichLevel);
                if (whichLevel != null) {
                    //TOP LENGTH: 4, BOTOM LENGTH:5, BOTTOM HEIGHT: 6
                    System.out.println("selectedTrailerIndex=" + selectedTrailerIndex);
                    System.out.println("trailersTableList size=" + trailersTableList.size());
                    //VEHICLE LENGTH: 6, VEHICLE HEIGHT: 7                    
                    int vHeight = Integer.parseInt(vehiclesLoadedTableList.get(row).get(6));
                    //NOW TEST IF POSSIBLE TO LOAD......:
                    System.out.println("whichLevel=" + whichLevel);
                    System.out.println("vLenght=" + vLength);
                    System.out.println("tSpace=" + tSpace);
                    System.out.println("bSpace=" + bSpace);
                    System.out.println("bHeight=" + bHeight);
                    System.out.println("vHeight=" + vHeight);
                    if ((whichLevel.equals("TOP") && tSpace >= vLength) || (whichLevel.equals("BOTTOM") && bSpace >= vLength && bHeight > vHeight)) {
                        vehiclesLoadedTrailer.set(row, "UNLOAD");
                        vehiclesLoadedTableList.get(row).set(0, vehiclesLoadedTableList.get(row).get(0).split(" ")[0] + " UNLOAD");
                        vehiclesLoadedVINs.add(new String[]{vehiclesLoadedTableList.get(row).get(1), whichLevel, vehiclesLoadedTableList.get(row).get(5)});//ADD THE VIN, BOOTOM OR TOP, AND LENGTH
                        numberLoadedTrailer++;
                        loadedTrailerLabel.setText(String.valueOf(numberLoadedTrailer));
                        vehiclesLoadedTableModel = new SimpleTableModel(vehiclesLoadedTableList, vehiclesLoadedColumns);
                        loadedVehiclesTable.setModel(vehiclesLoadedTableModel);
                        loadedVehiclesTable.getColumnModel().getColumn(0).setCellRenderer(cellRenderer);
                        for (int l = 0; l < vehiclesLoadedVINs.size(); l++) {
                            System.out.println((l + 1) + ") Loaded VIN=" + vehiclesLoadedVINs.get(l)[0]);
                        }
                        if (whichLevel.equals("BOTTOM")) {
                            //UPDATE TABLE...
                            if (hasTrailer.equals("Y")) {
                                driversTableList.get(selectedDriverIndex).set(5, String.valueOf(bSpace - vLength));
                            } else if (hasTrailer.equals("N")) {
                                trailersTableList.get(selectedTrailerIndex).set(4, String.valueOf(bSpace - vLength));
                            }
                        } else if (whichLevel.equals("TOP")) {
                            //UPDATE TABLE...
                            if (hasTrailer.equals("Y")) {
                                driversTableList.get(selectedDriverIndex).set(4, String.valueOf(tSpace + vLength));
                            } else if (hasTrailer.equals("N")) {
                                trailersTableList.get(selectedTrailerIndex).set(3, String.valueOf(tSpace + vLength));
                            }
                        }
                    } else {
                        h.infoMessage("WON'T FIT");
                        return;
                    }
                }
            } else {//FOR UNLOAD TRAILER:
                vehiclesLoadedTrailer.set(row, "LOAD");
                vehiclesLoadedTableList.get(row).set(0, vehiclesLoadedTableList.get(row).get(0).split(" ")[0] + " LOAD");
                for (int i = 0; i < vehiclesLoadedVINs.size(); i++) {
                    if (vehiclesLoadedVINs.get(i)[0].equals(vehiclesLoadedTableList.get(row).get(1))) {
                        //UPDATE TRAILER SPACE:                        
                        if (vehiclesLoadedVINs.get(i)[1].equals("BOTTOM")) {
                            if (hasTrailer.equals("Y")) {
                                driversTableList.get(selectedDriverIndex).set(5, String.valueOf(bSpace + vLength));
                            } else if (hasTrailer.equals("N")) {
                                trailersTableList.get(selectedTrailerIndex).set(5, String.valueOf(bSpace + vLength));
                            }
                        } else if (vehiclesLoadedVINs.get(i)[1].equals("TOP")) {
                            if (hasTrailer.equals("Y")) {
                                driversTableList.get(selectedDriverIndex).set(4, String.valueOf(bSpace + vLength));
                            } else if (hasTrailer.equals("N")) {
                                trailersTableList.get(selectedTrailerIndex).set(5, String.valueOf(bSpace + vLength));
                            }
                        }
                        vehiclesLoadedVINs.remove(i);
                        numberLoadedTrailer--;
                        loadedTrailerLabel.setText(String.valueOf(numberLoadedTrailer));
                    }
                }
            }
            //UPDATE DRIVER TABLE
            driversTableModel = new SimpleTableModel(driversTableList, driversColumns);
            driversTable.setModel(driversTableModel);
            driversTable.setRowSelectionInterval(selectedDriverIndex, selectedDriverIndex);
            //UPDATE TRAILER TABLE
            trailersTableModel = new SimpleTableModel(trailersTableList, trailersColumns);
            trailersTable.setModel(trailersTableModel);
            if (selectedTrailerIndex != -1) {
                driversTable.setRowSelectionInterval(selectedTrailerIndex, selectedTrailerIndex);
            }
        }

    }//GEN-LAST:event_loadedVehiclesTableMouseClicked

    public List<JOB> getJOBs(){
        return myJOBs;        
    }
    
    private void loadOutMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_loadOutMouseClicked
        //public myBOLs(String _driver, String _fromRegion, String _toRegion, String _fromAddress,
        //String _toAddress, int _bUsed, int _tUsed, int _bLength, int _tLength, int _bHeight, List<List<String>> _vehicles)
        //BOLS = new myBOLs();
        List<List<String>> vehicles;
        String driver, fromRegion, toRegion, fromAddress, toAddress;
        int bUsed, tUsed, bLength, tLength, bHeight;
        //vehicles = 
        driver = driversTableList.get(selectedDriverIndex).get(1);
        fromRegion = savedFrom;
        toRegion = savedTo;
        fromAddress
        
        //myBOL = new myBOLs(, );
        BOLS.add(myBOL);
        myJOBs.add()
    }//GEN-LAST:event_loadOutMouseClicked
    public void loadDrivers() {

        String selectedFrom = selectFromRegion.getSelectedItem().toString();
        String driversSQL = "select D.FName || ' ' || D.LName as \"Driver\", L.Region as \"Region\", L.Address as \"Address\","
                + " (T.TLength-T.TUsed) AS \"Top Space\", (T.BLength-T.BUsed) AS \"Bottom Space\", T.BHeight, T.DriID"
                + " from ((driver D left outer join trailer T on D.DriID=T.DriID) inner join location L on L.LocID=T.LocID and L.Region='" + selectedFrom + "')"
                + "  order by D.FName";

        driversTableList = loadDrivers(driversSQL);
        driversTableModel = new SimpleTableModel(driversTableList, driversColumns);
        driversTable.setModel(driversTableModel);

    }

    public void loadTrailers() {
        String selectedFrom = selectFromRegion.getSelectedItem().toString();
        //NEED TO GET AVAILABLE SPACE:
        String trailersSQL = "select T.TraID, L.Region as \"Region\", L.Address as \"Address\", "
                + "(T.TLength-T.TUsed) AS \"Top Space\", (T.BLength-T.BUsed) AS \"Bottom Space\", T.BHeight from (trailer T inner join location L on L.LocID=T.LocID"
                + " and L.Region='" + selectedFrom + "') where T.DriID=NULL";
        trailersTableList = loadTrailers(trailersSQL);
        trailersTableModel = new SimpleTableModel(trailersTableList, trailersColumns);
        trailersTable.setModel(trailersTableModel);
        selectedTable = "trailersTable";

    }

    public List<List<String>> loadBols(ResultSet rs) {

        List<List<String>> bolsList = new ArrayList<List<String>>();
        try {  // In Java resultset, the first row is numbered 0 and 
            // the first column is numbered as 1.            
            //From Name, From Address, To Name, To Address, #Vehicles

            //------------------------------------------------------
            int bol_index = 0;
            do {
                bolsList.add(new ArrayList<String>());
                bolsList.get(bolsList.size() - 1).add(bolsList.size() + " " + bolsLoaded.get(bol_index++));
                bolsList.get(bolsList.size() - 1).add(rs.getString(1));
                bolsList.get(bolsList.size() - 1).add(rs.getString(2));
                bolsList.get(bolsList.size() - 1).add(rs.getString(3));
                bolsList.get(bolsList.size() - 1).add(rs.getString(4));
                bolsList.get(bolsList.size() - 1).add(rs.getString(5));
            } while (rs.next());
            rs.close();

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return bolsList;
    }

    public List<List<String>> loadDrivers(String sql) {

        List<List<String>> driversList = new ArrayList<List<String>>();
        try {  // In Java resultset, the first row is numbered 0 and 
            // the first column is numbered as 1.
            ResultSet rs = DBConnection.getResultSet(sql);
            //From Name, From Address, To Name, To Address, #Vehicles

            //------------------------------------------------------
            int driver_ct = 1;
            while (rs.next()) {
                driversList.add(new ArrayList<String>());
                driversList.get(driversList.size() - 1).add(String.valueOf(driver_ct++));
                driversList.get(driversList.size() - 1).add(rs.getString(1));
                driversList.get(driversList.size() - 1).add(rs.getString(2));
                driversList.get(driversList.size() - 1).add(rs.getString(3));
                driversList.get(driversList.size() - 1).add(rs.getString(4));
                driversList.get(driversList.size() - 1).add(rs.getString(5));
                driversList.get(driversList.size() - 1).add(rs.getString(6));
                //HAS TRAILER:
                hasTrailer = rs.getString(7);
                if (rs.wasNull()) {
                    hasTrailer = "N";
                    driversList.get(driversList.size() - 1).add("N");
                } else {
                    hasTrailer = "Y";
                    driversList.get(driversList.size() - 1).add("Y");
                }
            }
            rs.close();

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return driversList;
    }

    public List<List<String>> loadTrailers(String sql) {

        List<List<String>> trailersList = new ArrayList<List<String>>();
        try {  // In Java resultset, the first row is numbered 0 and 
            // the first column is numbered as 1.
            ResultSet rs = DBConnection.getResultSet(sql);
            //From Name, From Address, To Name, To Address, #Vehicles

            //------------------------------------------------------
            int trailer_ct = 1;
            while (rs.next()) {
                trailersList.add(new ArrayList<String>());
                trailersList.get(trailersList.size() - 1).add(String.valueOf(trailer_ct++));
                trailerIDs.add(rs.getInt(1));
                trailersList.get(trailersList.size() - 1).add(rs.getString(2));
                trailersList.get(trailersList.size() - 1).add(rs.getString(3));
                trailersList.get(trailersList.size() - 1).add(rs.getString(4));
                trailersList.get(trailersList.size() - 1).add(rs.getString(5));
                trailersList.get(trailersList.size() - 1).add(rs.getString(6));
                trailersList.get(trailersList.size() - 1).add(rs.getString(7));
            }
            rs.close();

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return trailersList;
    }

    public List<List<String>> loadVehicles(String sql, int bol_index) {

        List<List<String>> vehiclesList = new ArrayList<List<String>>();
        try {  // In Java resultset, the first row is numbered 0 and 
            // the first column is numbered as 1.
            ResultSet rs = DBConnection.getResultSet(sql);
            //From Name, From Address, To Name, To Address, #Vehicles

            //------------------------------------------------------            
            int vehicle = 0;
            while (rs.next()) {
                vehiclesList.add(new ArrayList<String>());
                vehiclesList.get(vehiclesList.size() - 1).add(vehiclesList.size() + " " + vehiclesLoaded.get(bol_index).get(vehicle++));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(1));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(2));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(3));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(4));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(5));
                vehiclesList.get(vehiclesList.size() - 1).add(rs.getString(6));
            }
            rs.close();

        } catch (SQLException e) {
            e.printStackTrace();
            return null;
        }
        return vehiclesList;
    }

    public void setColumns() {
        bolsColumns = new ArrayList<String>();
        bolsColumns.add("LOAD/UNLOAD");
        bolsColumns.add("From Name");
        bolsColumns.add("From Address");
        bolsColumns.add("To Name");
        bolsColumns.add("To Address");
        bolsColumns.add("# Vehicles");

        driversColumns = new ArrayList<String>();
        driversColumns.add("#");
        driversColumns.add("Driver");
        driversColumns.add("Region");
        driversColumns.add("Last Address");
        driversColumns.add("Top Space");
        driversColumns.add("Bottom Space");
        driversColumns.add("Bottom Height");
        driversColumns.add("Trailer?");

        trailersColumns = new ArrayList<String>();
        trailersColumns.add("#");
        trailersColumns.add("Region");
        trailersColumns.add("Address");
        trailersColumns.add("Top Space");
        trailersColumns.add("Bottom Space");
        trailersColumns.add("Bottom Height");

        vehiclesLoadedColumns = new ArrayList<String>();
        vehiclesLoadedColumns.add("#");
        vehiclesLoadedColumns.add("VIN");
        vehiclesLoadedColumns.add("Year");
        vehiclesLoadedColumns.add("Make");
        vehiclesLoadedColumns.add("Model");
        vehiclesLoadedColumns.add("Length");
        vehiclesLoadedColumns.add("Height");

        vehiclesColumns = new ArrayList<String>();
        vehiclesColumns.add("LOAD/UNLOAD");
        vehiclesColumns.add("VIN");
        vehiclesColumns.add("Year");
        vehiclesColumns.add("Make");
        vehiclesColumns.add("Model");
        vehiclesColumns.add("Length");
        vehiclesColumns.add("Height");

    }

    public void unloadDriver() {
        int bSpace = 0, tSpace = 0;
        int vLength = 0;
        for (int i = 0; i < vehiclesLoadedVINs.size(); i++) {
            vLength = Integer.parseInt(vehiclesLoadedVINs.get(i)[2]);
            if (vehiclesLoadedVINs.get(i)[1].equals("BOTTOM")) {
                if (hasTrailer.equals("Y")) {
                    bSpace = Integer.parseInt(driversTableList.get(selectedDriverIndex).get(5));
                    driversTableList.get(selectedDriverIndex).set(5, String.valueOf(bSpace + vLength));
                } else if (hasTrailer.equals("N")) {
                    bSpace = Integer.parseInt(trailersTableList.get(selectedDriverIndex).get(4));
                    driversTableList.get(selectedTrailerIndex).set(4, String.valueOf(bSpace + vLength));
                }
            } else if (vehiclesLoadedVINs.get(i)[1].equals("TOP")) {
                if (hasTrailer.equals("Y")) {
                    tSpace = Integer.parseInt(driversTableList.get(selectedDriverIndex).get(4));
                    driversTableList.get(selectedDriverIndex).set(4, String.valueOf(tSpace + vLength));
                } else if (hasTrailer.equals("N")) {
                    tSpace = Integer.parseInt(trailersTableList.get(selectedDriverIndex).get(3));
                    driversTableList.get(selectedTrailerIndex).set(3, String.valueOf(tSpace + vLength));
                }

            }
        }
        //UPDATE DRIVER TABLE
        driversTableModel = new SimpleTableModel(driversTableList, driversColumns);
        driversTable.setModel(driversTableModel);
        driversTable.setRowSelectionInterval(selectedDriverIndex, selectedDriverIndex);
        //UPDATE TRAILER TABLE
        trailersTableModel = new SimpleTableModel(trailersTableList, trailersColumns);
        trailersTable.setModel(trailersTableModel);
        if (selectedTrailerIndex != -1) {
            driversTable.setRowSelectionInterval(selectedTrailerIndex, selectedTrailerIndex);
        }
    }
    
    public void resetLoadedVins(){
        System.out.println("resetLoadedVins called");
        System.out.println("vehiclesLoadedTableList size=" + vehiclesLoadedTableList.size());
        for (int i=0;i<vehiclesLoadedTableList.size();i++){
            vehiclesLoadedTableList.get(i).set(0, vehiclesLoadedTableList.get(i).get(0).split(" ")[0] + " LOAD");
        }
        vehiclesLoadedVINs.clear();
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CvatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CvatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CvatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CvatJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                cvatJFrame = new CvatJFrame();
                cvatJFrame.setVisible(true);
            }
        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel BOLPanel;
    private javax.swing.JPanel ExportImportPanel;
    private javax.swing.JPanel ListedPanel;
    private javax.swing.JTable bolVehiclesTable;
    private javax.swing.JTable bolsTable;
    private javax.swing.JTable driversTable;
    private javax.swing.JButton getListedBOLs;
    private javax.swing.JButton getPastBOLVehicles;
    private javax.swing.JCheckBox isActiveBOLs;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane2;
    private javax.swing.JTabbedPane jTabbedPane5;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable6;
    private javax.swing.JButton loadOut;
    private javax.swing.JLabel loadedTrailerLabel;
    private javax.swing.JTable loadedVehiclesTable;
    private javax.swing.JLabel numberLoadedLabel;
    private javax.swing.JComboBox<String> selectFromRegion;
    private javax.swing.JComboBox<String> selectToRegion;
    private javax.swing.JLabel selectTrailerLabel;
    private javax.swing.JLabel selectedBOLLabel;
    private javax.swing.JLabel selectedBolLabel;
    private javax.swing.JLabel selectedDriverLabel;
    private javax.swing.JLabel selectedTrailerLabel;
    private javax.swing.JTable trailersTable;
    // End of variables declaration//GEN-END:variables

    
    public class BOL {
        public List<List<String>> vehicles;
        public String fromAddress, toAddress;
        public BOL(String _fromAddress, String _toAddress, List<List<String>> _vehicles){
            vehicles = _vehicles;
            fromAddress = _fromAddress;
            toAddress = _toAddress;
        }                
  }
    
    public class JOB {
        public List<BOL> bols;
        public String driver, fromRegion, toRegion;
        public int bUsed, tUsed, bLength, tLength, bHeight;
        public JOB(String _driver, String _fromRegion, String _toRegion, String _fromAddress, String _toAddress, int _bUsed, int _tUsed, int _bLength, int _tLength, int _bHeight, List<List<String>> _vehicles){
            driver=_driver;
            fromRegion = _fromRegion;
            toRegion = _toRegion;
            bUsed = _bUsed;
            tUsed = _tUsed;
            bLength = _bLength;
            tLength = _tLength;
            bHeight = _bHeight;            
        }                
    }  


}


